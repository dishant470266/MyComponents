import { Platform, ActivityIndicator, Alert, Modal, PermissionsAndroid } from 'react-native';
//import ImagePicker from 'react-native-image-picker';
import { launchCamera, launchImageLibrary } from 'react-native-image-picker';
import ResourceUploadAPI from '../apis/resource.upload';
import RNFetchBlob from 'rn-fetch-blob';
import { getPlainValue } from '../utils/storage';
import { config } from '../config';
import { showLoader, hideLoader, loaderProps } from '../utils';
import DocumentPicker from 'react-native-document-picker';

const pick = async (type, optionType) => {
  let title = '';
  let takePhotoButtonTitle = null;
  let isCameraPermitted;
  let isStoragePermitted;
  console.log('pick params inside ', type, optionType);

  switch (type) {
    case 'image':
      title = 'Image';
      takePhotoButtonTitle = 'Take Photo...';
      isCameraPermitted = await requestCameraPermission();
      isStoragePermitted = await requestExternalWritePermission();
      break;

    case 'video':
      title = 'Video';
      takePhotoButtonTitle = 'Take Video...';
      isCameraPermitted = await requestCameraPermission();
      isStoragePermitted = await requestExternalWritePermission();
      break;

    default:
      break;
  }

  const options = {
    title: 'Select ' + title,
    takePhotoButtonTitle,
    mediaType: type,
    maxWidth: 1000,
    maxHeight: 1000,
    storageOptions: {
      skipBackup: true,
      path: 'images',
    },
    videoQuality: 'medium',
    saveToPhotos: true,
  };

  return new Promise((resolve, reject) => {
    if (optionType === 1) {
      launchCamera(options, async (response) => {
        console.log('Response = ', response);
        if (isCameraPermitted && isStoragePermitted) {
          if (response.didCancel) {
            response.error = 'CANCEL';
          }
          if (response.error) {
            reject(response.error);
          } else {
            console.log('resolve Response = ', response);
            resolve(response);
          }
        }
      });
    } else {
      launchImageLibrary(options, async (response) => {
        console.log('Response from library= ', response);
        if (isStoragePermitted) {
          if (response.didCancel) {
            response.error = 'CANCEL';
          }
          if (response.error) {
            reject(response.error);
          } else {
            resolve(response);
          }
        }
      });
    }

    // launchCamera(options, (response) => {
    //   console.log('Response = ', response);

    //   if (response.didCancel) {
    //     //alert('User cancelled camera picker');
    //     //return;
    //     reject('User cancelled camera picker');
    //   } else if (response.errorCode == 'camera_unavailable') {
    //     //alert('Camera not available on device');
    //     //return;
    //     reject('Camera not available on device');
    //   } else if (response.errorCode == 'permission') {
    //     //alert('Permission not satisfied');
    //     //return;
    //     reject('Permission not satisfied');
    //   } else if (response.errorCode == 'others') {
    //     //alert(response.errorMessage);
    //     reject(response.errorMessage);
    //   }
    //   console.log('base64 -> ', response.base64);
    //   console.log('uri -> ', response.uri);
    //   console.log('width -> ', response.width);
    //   console.log('height -> ', response.height);
    //   console.log('fileSize -> ', response.fileSize);
    //   console.log('type -> ', response.type);
    //   console.log('fileName -> ', response.fileName);
    //   resolve(response);
    // });
    //const res =captureImage("video");
    //console.log("capture video response ",res);
    //resolve(res);
  });
};

const requestCameraPermission = async () => {
  if (Platform.OS === 'android') {
    try {
      const granted = await PermissionsAndroid.request(PermissionsAndroid.PERMISSIONS.CAMERA, {
        title: 'Camera Permission',
        message: 'App needs camera permission',
      });
      // If CAMERA Permission is granted
      return granted === PermissionsAndroid.RESULTS.GRANTED;
    } catch (err) {
      console.warn(err);
      return false;
    }
  } else return true;
};

const requestExternalWritePermission = async () => {
  if (Platform.OS === 'android') {
    try {
      const granted = await PermissionsAndroid.request(PermissionsAndroid.PERMISSIONS.WRITE_EXTERNAL_STORAGE, {
        title: 'External Storage Write Permission',
        message: 'App needs write permission',
      });
      // If WRITE_EXTERNAL_STORAGE Permission is granted
      return granted === PermissionsAndroid.RESULTS.GRANTED;
    } catch (err) {
      console.warn(err);
      alert('Write permission err', err);
    }
    return false;
  } else return true;
};

const captureImage = async (type) => {
  let options = {
    mediaType: 'video',
    //maxWidth: 300,
    //maxHeight: 550,
    quality: 1,
    videoQuality: 'medium',
    durationLimit: 30000, //Video max duration in seconds
    saveToPhotos: true,
  };
  let isCameraPermitted = true; //await requestCameraPermission();
  let isStoragePermitted = true; //await requestExternalWritePermission();
  if (isCameraPermitted && isStoragePermitted) {
    launchCamera(options, (response) => {
      console.log('Response = ', response);

      if (response.didCancel) {
        alert('User cancelled camera picker');
        return;
      } else if (response.errorCode == 'camera_unavailable') {
        alert('Camera not available on device');
        return;
      } else if (response.errorCode == 'permission') {
        alert('Permission not satisfied');
        return;
      } else if (response.errorCode == 'others') {
        alert(response.errorMessage);
        return;
      }
      console.log('base64 -> ', response.base64);
      console.log('uri -> ', response.uri);
      console.log('width -> ', response.width);
      console.log('height -> ', response.height);
      console.log('fileSize -> ', response.fileSize);
      console.log('type -> ', response.type);
      console.log('fileName -> ', response.fileName);
      return response;
    });
  }
};

// export const pickUpload = async (resType, optionType) => {
//   try {
//     console.log('pick params ', resType, optionType);
//     const imgVidObj = await pick(resType, optionType);

//     console.log('resource.uploader pickUpload=', imgVidObj);
//     showLoader(loaderProps);
//     console.log(">> >>>>", imgVidObj.assets[0].uri)

//     const uri = Platform.OS === 'ios'
//       ? imgVidObj.assets[0].uri.replace('file://', '') //.replace('file://', '')
//       : imgVidObj.assets[0].uri.replace('file://', '').replace('file:/', '');
//     console.log('uir received', uri);

//     if (uri) {
//       const wrappedPath = Platform.OS === 'ios' ? RNFetchBlob.wrap(decodeURIComponent(uri)) : RNFetchBlob.wrap(uri);
//       console.log('uri for wrapped ', uri);

//       const { API_BASEURL } = config;
//       const uploadURL = `${API_BASEURL}resources/uploadResource`;

//       const { data } = await RNFetchBlob.fetch(
//         'POST',
//         uploadURL,
//         {
//           Authorization: getPlainValue('id_token'),
//           'Content-Type': 'multipart/form-data',
//         },
//         [
//           {
//             name: 'upload',
//             filename: 'sample-file-name', // filename is must, otherwise file sent to server & upload service says "No file found"
//             data: wrappedPath,
//             type: 'video',
//           },
//           { name: 'save', data: 'false' },
//           { name: 'isPrivate', data: 'true' },
//           { name: 'type', data: 'video' },
//         ]
//       );
//       hideLoader(loaderProps);
//       console.log('response from api resources/uploadResource ', JSON.stringify(data));
//       return JSON.parse(data);
//     } else {
//       hideLoader(loaderProps);
//       Alert.alert(`Info`, `File to downloaded, please try with another ${resType}`);
//     }
//   } catch (err) {
//     hideLoader(loaderProps);
//     console.log('err ResourcePicker, onPick', err);
//     if (err !== 'CANCEL') {
//       Alert.alert(`Error`, err.message || err);
//     }
//   }
// };


export const pickUpload = async (resType, optionType) => {
  //Opening Document Picker for selection of one file
  try {
    const res = await DocumentPicker.pick({
      type: [
        DocumentPicker.types.images,
        DocumentPicker.types.video
      ],
    });
    showLoader(loaderProps);

    let {name, uri, type} = res;
    console.log('Pick Resource >>> ', JSON.stringify(res));
    if (Platform.OS === 'android') {
      if (uri.includes('com.google.android')) {
        showMessage({
          message: 'Google drive files not allowed',
          type: 'danger',
        });
        return;
      }
    }

    try {
      const updatedUri = Platform.OS === 'ios'
          ? uri.replace('file://', '')
          : uri.replace('file://', '').replace('file:/', '');

      console.log('updatedUri>>>', updatedUri);
      const wrappedPath = Platform.OS === 'ios'
          ? RNFetchBlob.wrap(decodeURIComponent(updatedUri))
          : RNFetchBlob.wrap(updatedUri);
      console.log('wrappedPath>>>', wrappedPath);

      const { API_BASEURL } = config;
      const uploadURL = `${API_BASEURL}resources/uploadResource`;

      const {data} = await RNFetchBlob.fetch(
        'POST',
        uploadURL,
        {
          Authorization: getPlainValue('id_token'),
          'Content-Type': 'multipart/form-data',
        },
        [
          {
            name: 'Files',
            data: wrappedPath,
            filename: name || 'sample-file-name', // filename is must, otherwise file sent to server & upload service says "No file found"
            type: type,
          },
          //{ name: 'save', data: 'false' },
          //{ name: 'isPrivate', data: 'true' },
          {name: 'type', data: type},
        ],
      );
      hideLoader(loaderProps);
      console.log('response from api resources/uploadResource ', JSON.stringify(data));
      return JSON.parse(data);
    } catch (err) {
      hideLoader(loaderProps);
      console.log('err ResourcePicker, onPick', err);
      if (err !== 'CANCEL') {
        Alert.alert(`Error`, err.message || err);
      }
    }
  } catch (err) {
    hideLoader(loaderProps);
    console.log('err ResourcePicker, onPick 1', err);
  }
};

export const resourceUploadByLink = async ({ type, url }) => {
  try {
    showLoader(loaderProps);

    const { API_BASEURL } = config;
    const uploadURL = `${API_BASEURL}/resources/uploadResource`;

    const { data } = await RNFetchBlob.fetch(
      'POST',
      uploadURL,
      {
        Authorization: getPlainValue('id_token'),
        'Content-Type': 'multipart/form-data',
      },
      [
        {
          name: 'upload',
          save: false,
          isPrivate: false,

          filename: fileName || 'sample-file-name', // filename is must, otherwise file sent to server & upload service says "No file found"
          imageURL: url,
          type: type,
        },
        { name: 'save', data: 'false' },
        { name: 'isPrivate', data: 'true' },
        { name: 'type', data: type },
      ]
    );

    return JSON.parse(data);

    // console.log(data);

    // return data;
  } catch (err) {
    console.log('err ResourcePicker, onPick', err);
    //showError(err.message || err);
    Alert.alert(`Error`, err.message || err);
  }
  hideLoader(loaderProps);
};
